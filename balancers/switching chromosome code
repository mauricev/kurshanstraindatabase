set 1st to IInow II must pull out of listbut say I have II and III setII listing doesn't have III and III listing doesn't have IIand it's wrong I want the first one at IIanswer, set the second chromosome to "nothing"so now it's a question of how to update the listwhen I select a chromosome from a list, it removes that chromosome from the other listi was confused. i thought there were selectors, but they're are not. this is just a menuwhen I set second to nothing, all chromosomes in the first list need to come backhard part is how to edit this list on the flyso they have identifiers select-chromosome1need a listener on both of them and a common function that rebuilds the list for each of them on the flythe listener needs to work on the OTHER oneso we get the selected one, say, it's chromosome 1. we then remove chromosome 1 from the other one. but a problem if we then select chromosome 2, chromosome 1 is still removed from the other onemight be easier to simply record the index of the other one and to rebuild its list with locally selected one missing. if one was selected, we automatically select the empty onei select 1 from the 1st one. second list is rebuilt with 1 missing and if 1 was selected, empty is now selectedso I go the second one, I can't select 1 because it's missingif I now select two from the first one, second list is rebuilt with second one missingI can't deselect entirely from the first one$("#select-chromosome1").onchange = function (event) {	// there is a value and text associated with each element of a select entry	if this.selectedIndex > 0 {		var theFirstSelectedChromosome=$("# select-chromosome1 option:selected").val();		 	} else nothing is selected, do nothing because I can't deselect what's already selected }i start by selecting chromosome 1 of the first selector. now iterate through the second one disabling the match, chromosome 1 and ENABLING the others, empty is NEVER disabled$("#select-chromosome1 option[value=1]").attr("disabled","disabled");